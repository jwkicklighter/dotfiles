" Vundle
set nocompatible              " be iMproved, required
"filetype off                  " required

"set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/plugged')

" Let Vundle manage itself
"Plug 'VundleVim/Vundle.vim'

" Misc Plugs
Plug 'mhinz/vim-startify'
Plug 'rking/ag.vim'
"Plug 'valloric/youcompleteme'
"Plug 'craigemery/vim-autotag'
Plug 'Shougo/vimproc.vim'
Plug 'airblade/vim-gitgutter'
"Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'dsawardekar/wordpress.vim'
Plug 'delimitMate.vim'                " Insert mode auto-completion for quotes, parens, brackets, etc.
Plug 'Yggdroot/indentLine'            " Indent guides
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'ap/vim-css-color'
Plug 'terryma/vim-expand-region'      " use +/_ to expand/contract visual selection region
Plug 'michaeljsmith/vim-indent-object'
Plug 'justinmk/vim-sneak'
"Plug 'tommcdo/vim-exchange'
Plug 'pbrisbin/vim-mkdir'             " Automatically create any non-existent directories before writing the buffer.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'vim-ctrlspace/vim-ctrlspace'
"Plug 'AutoComplPop'
"Plug 'SirVer/ultisnips'
"Plug 'honza/vim-snippets'

" Syntax Plugs
Plug 'SyntaxComplete'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-endwise'
Plug 'godlygeek/tabular'              " Needed for vim-markdown
Plug 'plasticboy/vim-markdown'
Plug 'kchmck/vim-coffee-script'
Plug 'cakebaker/scss-syntax.vim'
Plug 'StanAngeloff/php.vim'
Plug 'jelera/vim-javascript-syntax'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'myhere/vim-nodejs-complete'
Plug 'nginx.vim'
Plug 'tpope/vim-git'
Plug 'posva/vim-vue'
"Plug 'rust-lang/rust.vim'
"Plug 'phildawes/racer'

" Color Schemes
Plug 'jwkicklighter/vim-schemes'

" Git Plugs
"Plug 'mattn/webapi-vim'               " Needed for gist-vim
"Plug 'mattn/gist-vim'
"Plug 'gregsexton/gitv'
"Plug 'motemen/git-vim'
Plug 'tpope/vim-fugitive'

" Disabled Plugs
"Plug 'pangloss/vim-javascript'
"Plug 'MarcWeber/vim-addon-mw-utils'
"Plug 'tomtom/tlib_vim'
"Plug 'tyru/open-browser.vim'
"Plug 'reedes/vim-wordy'
"Plug 'ervandew/supertab.git'
"Plug 'flazz/vim-colorschemes'
"Plug 'nanotech/jellybeans.vim'
"Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}
"Plug 'antlypls/vim-colors-codeschool'
"Plug 'wellsjo/wellsokai.vim'
"Plug 'junegunn/limelight.vim'
"Plug 'xoria256.vim'
"Plug 'whatyouhide/vim-gotham'
"Plug 'zeis/vim-kolor'
"Plug 'elzr/vim-json'
"Plug 'dag/vim2hs'
"Plug 'eagletmt/ghcmod-vim'
"Plug 'ahw/vim-hooks'
"Plug 'majutsushi/tagbar'
Plug 'ctrlpvim/ctrlp.vim'
"Plug 'shawncplus/phpcomplete.vim'
"Plug 'Lokaltog/vim-powerline'
"Plug 'myusuf3/numbers.vim'

call plug#end()            " required
filetype plugin indent on    " required

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" AutoCMD stuff
autocmd BufWritePost *.hs GhcModCheckAndLintAsync
autocmd FileType ruby compiler ruby
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

" Detect platform for keybindings
if has("unix")
  let s:uname = system("uname -s")
  if s:uname == "Darwin\n"
    let s:keyplatform = "mac"
  else
    let s:keyplatform = "linux"
  endif
else
  let s:keyplatform = "windows"
endif

if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
        \	if &omnifunc == "" |
        \		setlocal omnifunc=syntaxcomplete#Complete |
        \	endif
endif

" CUSTOM SETTINGS
color fox.dark
syntax on
set number                       " Enable line numbers
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set smartindent
set gfn=Hack:h11
set linespace=2                  " Adds space in between lines
set conceallevel=0               " Do not hide any quotes
let g:conceallevel=0
set nofoldenable                 " disable folding
set laststatus=2                 " Always show the statusline
set encoding=utf-8               " Necessary to show Unicode glyphs
set colorcolumn=120              " Show a line guide at 120

set autoread                     " Read changes to files outside vim
set magic
set showmatch                    " Highlight matching brackets
set incsearch
set ignorecase                   " Ignore case for searches by default
set smartcase
set scrolloff=0                  " Cause cursor to stay in middle of screen
set clipboard=unnamed            " Use system keyboard
set hidden                       " Required by ctrlspace
set splitbelow                   " Open new splits below the current buffer
set splitright                   " Open new splits to the right of the current buffer

set backspace=indent,eol,start   " Fix backspace not deleting tabs, also make delimiteMate work

" CtrlSpace
if has("gui_running")
  let g:CtrlSpaceSymbols = { "File": "◯", "CTab": "▣", "Tabs": "▢" }
endif
let g:CtrlSpaceSearchTiming = 0
hi CtrlSpaceSelected term=reverse ctermfg=187 ctermbg=23 cterm=bold
hi CtrlSpaceNormal term=NONE ctermfg=244 ctermbg=232 cterm=NONE
hi CtrlSpaceFound ctermfg=220 ctermbg=NONE cterm=bold

" Some plugin setting
let g:ctrlp_show_hidden=1
let g:ctrlp_working_path_mode="rw"
let delimitMate_expand_cr = 1
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:vim_markdown_folding_disabled = 1

" Syntastic checkers
let g:syntastic_ruby_checkers=['rubocop', 'reek']
let g:syntastic_haml_checkers=['haml']
let g:syntastic_scss_checkers=['scss_lint']

" Auto-focus Tagbar when opened
"let g:tagbar_autofocus = 1

" Startify Settings
let g:startify_bookmarks = [ {'v': '~/.vimrc'}, {'z': '~/.zshrc'}, {'d': '~/dev/kommander/detail-kommander'} ]
let g:startify_change_to_vcs_root = 1

" Adds indentation guide like Sublime
let g:indentLine_char = '|'
let g:indentLine_enabled = 1

" Gist Settings
let g:gist_detect_filetype = 1          " Detect for gists filetype automatically
let g:gist_open_browser_after_post = 1  " Open browser after creating gist
let g:gist_show_privates = 1            " Let :Gist -l show private gists
let g:gist_post_private = 1             " Set gists as private by default

" NERDTree/NERDTreeTabs
let g:nerdtree_tabs_open_on_gui_startup = 0

" CUSTOM KEYBINDINGS
" Use <Space> to open prompt
nmap <Space> :
vmap <Space> :

" Use Ctrl+[ to preview tag
map <C-}> <C-W>}

" Use Ctrl+<key> shortcuts for buffers
nmap <C-S-tab> :bprev<cr>
nmap <C-tab> :bnext<cr>
vmap <C-S-tab> :bprev<cr>
vmap <C-tab> :bnext<cr>
imap <C-S-tab> <C-o>:bprev<cr>
imap <C-tab> <C-o>:bnext<cr>

" Close current buffer without killing split
command Q bp|bw#

" Close last buffer (:q last)
command QL bw#

" Bettor split navigation
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Open CtrlSpace with CMD+Shift+A
"if s:keyplatform == "mac"
  "map <D-A> :CtrlSpace<cr>
"else
  "map <C-A> :CtrlSpace<cr>
"endif

" Open CtrlP with CMD+Shift+O, like IntelliJ
if s:keyplatform == "mac"
  map <D-O> <C-p>
else
  map <C-O> <C-p>
endif

" Rebuild tags with \b
nnoremap <Leader>b :execute '!ctags -R'<cr>

" Open Syntastic error window
nnoremap <Leader>e :Errors<cr>

" Duplicate line with CMD+D, like IntelliJ
if s:keyplatform == "mac"
  map <D-d> :t.<cr>
else
  map <C-d> :t.<cr>
endif

imap <C-Space> <C-x><C-o>

" Open NERDTree with CMD+\ or CTRL+\
if s:keyplatform == "mac"
  map <D-\> :NERDTreeTabsToggle<cr>
else
  map <C-\> :NERDTreeTabsToggle<cr>
endif

" CMD+/ to toggle line comments
" Requires nerdcommenter plugin
if (s:keyplatform == "mac" && has("gui_running"))
  map <D-/> \c<Space>
else
  map <C-_> \c<Space>
endif

" CMD+k/CMD+j to move lines up/down
if s:keyplatform == "mac"
  nnoremap <D-J> :m .+1<CR>==
  nnoremap <D-K> :m .-2<CR>==
  inoremap <D-J> <Esc>:m .+1<CR>==gi
  inoremap <D-K> <Esc>:m .-2<CR>==gi
  vnoremap <D-J> :m '>+1<CR>gv=gv
  vnoremap <D-K> :m '<-2<CR>gv=gv
else
  nnoremap <C-J> :m .+1<CR>==
  nnoremap <C-K> :m .-2<CR>==
  inoremap <C-J> <Esc>:m .+1<CR>==gi
  inoremap <C-K> <Esc>:m .-2<CR>==gi
  vnoremap <C-J> :m '>+1<CR>gv=gv
  vnoremap <C-K> :m '<-2<CR>gv=gv
endif

" CMD+e to expand emmet snippet
" Requires emmet plugin
if s:keyplatform == "mac"
  imap <D-E> <C-y>,
else
  imap <C-E> <C-y>,
endif

" \zz to toggle keeping cursor in middle of screen
:nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>
