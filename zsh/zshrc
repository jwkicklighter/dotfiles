# Path to your oh-my-zsh installation.
PATH="/usr/local/bin:$(getconf PATH)"
fpath=($HOME/.zsh_completions $fpath)

# Directory vars
export ZSH=$HOME/.oh-my-zsh
export DOTFILES=$HOME/dotfiles
export ZSH_PLUGINS=$DOTFILES/zsh-plugins
export ANDROID_HOME=/usr/local/share/android-sdk
export NVM_DIR="$HOME/.nvm"

# FZF config
export FZF_DEFAULT_COMMAND='ag --nocolor -g ""'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"

# Source a .env file in the home directory to avoid adding any API keys to git
source $HOME/.env

# Install and set terminal to 1 of these fonts: git@github.com:powerline/fonts.git
# (Any Powerline font is actually fine, even if not from that repo)
# (I use "12pt Hack" for Regular & Non-ASCII in iTerm2)
autoload -U add-zsh-hook
ZSH_THEME="powerlevel10k/powerlevel10k"

# Custom Plugins (clone both into .oh-my-zsh/custom/plugins/[plugin name])
# git@github.com:zsh-users/zsh-history-substring-search.git     Searches history using typed text
# git://github.com/zsh-users/zsh-syntax-highlighting.git        Highlights terminal commands

plugins=(osx git git-flow git-extras github ruby rails wd bundler docker docker-compose gem node npm brew zsh-syntax-highlighting zsh-history-substring-search kubectl yarn systemd rake-fast jsontools)

source $ZSH/oh-my-zsh.sh

_has() {
  return $( whence $1 >/dev/null )
}

mkc () {
  mkdir -p "$@" && cd "$@"
}

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if _has nvim; then
  export EDITOR='nvim'
elif _has vim; then
  export EDITOR='vim'
fi

# Misc Aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias c='clear'
alias szshrc='source $HOME/.zshrc'
alias vzshrc='vim $HOME/.zshrc'
alias czshrc='code $HOME/.zshrc'
alias erc='$EDITOR $HOME/.zshrc'
alias td='wd'
alias s='spotify play/pause'
alias sup='sudo -E zsh'
alias vimr='sudo -E vim'
alias push='pushover -T $PUSHOVER_APP_TOKEN -u $PUSHOVER_USER_KEY'
alias serve='http-server'
alias w='watch -n1'

# Mac
# cleanopenwith='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder;echo "Open With has been rebuilt, Finder will relaunch"'

# MacVim
alias v='mvim --remote-tab-silent'
#alias vtab='mvim --remote-tab-silent'

# Arch
alias xclip='xclip -selection clipboard'

# Git
alias gs='git status'
alias gf='git fetch'
alias gfco='git fetch && git checkout'
alias gc='git commit'
alias gca='git commit --amend'
alias gl='git log --all --graph --decorate --oneline --simplify-by-decoration'
alias gt='git tag'
alias gp='git push'
alias gpu='git push -u origin $(git rev-parse --abbrev-ref HEAD)'
alias gcob='git checkout -b'
alias gcos='git-checkout-search'
#alias gcuc='git add CHANGELOG.md && git commit -m "Update changelog"'
# TODO: Move git-done to git aliases
alias git-done='git checkout develop && git branch -d @{-1}'

# Kubernetes
alias kctx='kubectx'

# Docker Compose
alias dcu='docker-compose up -d'
alias dcd='docker-compose down'
alias dcr='docker-compose run --rm'
alias dce='docker-compose exec'
alias dcre='docker-compose restart'
alias dcreh='docker-compose down && docker-compose up -d' # (Docker Compose Restart Hard)
alias dcl='docker-compose logs -f'

# Docker
alias dps='docker ps'
alias dpsa='docker ps -a'
alias drm='docker rm'
alias drma='docker rm $(docker ps -aq)'
alias da='docker attach --detach-keys="ctrl-z"'

# Docker Image
alias dil="docker image ls"
alias dilf="docker image ls --format='{{.ID}}'"
alias dirm="docker image rm"
alias dt="docker tag"

# ALL the bins!
export PATH="$HOME/sbin":$PATH
export PATH="/usr/local/bin":$PATH
export PATH=$PATH:"/usr/local/sbin"
export PATH=$PATH:"/usr/bin"
export PATH=$PATH:"/usr/sbin"
export PATH=$PATH:"/bin"
export PATH=$PATH:"/sbin"
export PATH=$PATH:"/opt/local/bin"
export PATH=$PATH:"/opt/local/sbin"
export PATH=$PATH:"$HOME/bin"
#export PATH=$PATH:"$HOME/bin/sbt"
#export PATH=$PATH:"$HOME/.cabal/bin"
#export PATH=$PATH:"$HOME/.cargo/bin"
#export PATH=$PATH:"/Library/TeX/texbin"
#export PATH=$PATH:"/usr/local/opt/go/libexec/bin"


# Load NVM
# NEEDS TO BE AFTER SYSTEM NODE IN $PATH
if [ -f '/usr/local/opt/nvm/nvm.sh' ]; then . '/usr/local/opt/nvm/nvm.sh'; fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc' ]; then source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc' ]; then source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'; fi

if _has ruby; then
  export PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH"
fi

if _has rbenv; then
  eval "$(rbenv init -)"
fi

# NPM
export PATH=$PATH:"/usr/local/share/npm/bin"

# FZF via homebrew
if [ -e /usr/local/opt/fzf/shell/completion.zsh ]; then
  source /usr/local/opt/fzf/shell/key-bindings.zsh
  source /usr/local/opt/fzf/shell/completion.zsh
fi

# SPACESHIP THEME CUSTOMIZATION
SPACESHIP_PROMPT_ORDER=(
  time
  user
  host
  dir
  git
  venv
  kubecontext
  exec_time
  line_sep
  jobs
  exit_code
  char
)

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /Users/jordan/.nvm/versions/node/v8.9.4/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /Users/jordan/.nvm/versions/node/v8.9.4/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /Users/jordan/.nvm/versions/node/v8.9.4/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . /Users/jordan/.nvm/versions/node/v8.9.4/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh

###-tns-completion-start-###
if [ -f /Users/jordan/.tnsrc ]; then
    source /Users/jordan/.tnsrc
fi
###-tns-completion-end-###

# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[[ -f /Users/jordan/.nvm/versions/node/v8.11.4/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh ]] && . /Users/jordan/.nvm/versions/node/v8.11.4/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
